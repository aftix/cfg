name: build-configuration

on:
  workflow_call:
    secrets:
      ATTIC_SERVER:
        required: true
      ATTIC_CACHE:
        required: true
      ATTIC_TOKEN:
        required: true
      PRIVATE_KEY:
        required: true
    inputs:
      substituters:
        type: string
        required: true
      trustedPublicKeys:
        type: string
        required: true
      configuration:
        type: string
        required: true

jobs:
  build:
    name: Build nixos configuration ${{ inputs.configuration }}
    runs-on: ubuntu-latest
    outputs:
      deploy: ${{ steps.getdeploy.outputs.deploy }}
    steps:
      - uses: actions/checkout@v4
      - name: Free up runner disk space
        run: ./.github/clean-space.bash

      - uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: |
            extra-substituters = ${{ inputs.substituters }}
            extra-trusted-public-keys = ${{ inputs.trustedPublicKeys }}

      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Install and configure attic
        timeout-minutes: 20
        run: ./.github/install-attic.bash
        env:
          ATTIC_SERVER: ${{ secrets.ATTIC_SERVER }}
          ATTIC_CACHE: ${{ secrets.ATTIC_CACHE }}
          ATTIC_TOKEN: ${{ secrets.ATTIC_TOKEN }}

      - name: Build configuration ${{ inputs.configuration }}
        timeout-minutes: 120
        run: |
          if [[ "${{ inputs.configuration }}" =~ ^iso- ]] ; then
            nix build '.#nixosConfigurations.${{ inputs.configuration }}.config.system.build.isoImage'
          else
            nix build '.#nixosConfigurations.${{ inputs.configuration }}.config.system.build.toplevel'
          fi

      - name: Push configuration ${{ inputs.configuration }} to attic
        run: nix-store --query --requisites --include-outputs ./result | xargs attic push "ci:$ATTIC_CACHE"

      - name: Find if ${{ inputs.configuration }} is in deploy.nodes
        id: getdeploy
        run: >
          nix eval .#deploy.nodes --apply 'x: builtins.elem "${{ inputs.configuration }}" (builtins.attrNames x)' | awk '{print "deploy="$0}' | tee -a "$GITHUB_OUTPUT"

  deploy:
    name: Deploy node ${{ inputs.configuration }}
    runs-on: ubuntu-latest
    needs: build
    concurrency:
      group: deploy-${{ inputs.configuration }}
      cancel-in-progress: true
    if: ${{ !github.event.forced && fromJSON(needs.build.outputs.deploy) }}
    steps:
      - uses: actions/checkout@v4

      - uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: |
            extra-substituters = ${{ needs.bootstrap.outputs.substituters }}
            extra-trusted-public-keys = ${{ needs.bootstrap.outputs.trustedPublicKeys }}

      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Install and configure attic
        timeout-minutes: 60
        continue-on-error: true
        run: ./.github/install-attic.bash
        env:
          ATTIC_SERVER: ${{ secrets.ATTIC_SERVER }}
          ATTIC_CACHE: ${{ secrets.ATTIC_CACHE }}
          ATTIC_TOKEN: ${{ secrets.ATTIC_TOKEN }}

      - name: Create ssh key from repository secrets
        run: |
          install -m 600 -D /dev/stdin ~/.ssh/id_ed25519 <<< "${{ secrets.PRIVATE_KEY }}"

      - name: Get ${{ inputs.configuration }} hostname
        id: hostname
        run: >
          nix eval '.#deploy.nodes.${{ inputs.configuration }}.hostname' | awk '{print "hostname="$0}' | tee -a "$GITHUB_OUTPUT"
    
      - name: Deploy ${{ inputs.configuration }}
        run: |
          ./.github/deploy-node.bash "${{ inputs.configuration }}" "${{ steps.hostname.outputs.hostname }}"
